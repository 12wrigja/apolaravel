<?php
/**
 * Created by PhpStorm.
 * User: james
 * Date: 7/16/15
 * Time: 8:37 PM
 */

namespace APOSite\Models\Reports;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\MessageBag;

abstract class ValidatingModel extends Model
{

    public $errors;
    protected $rules;
    protected $messages;

    /**
     * Listen for save event
     *
     * @return void
     */
    public static function boot()
    {
        parent::boot();

        static::creating(function($model)
        {
            return $model->validate();
        });
    }

    /**
     * Create a new Eloquent model instance.
     *
     * @param  array $attributes
     * @return void
     */
    public function __construct(array $attributes = [], array $rules = [], array $messages = [])
    {
        parent::__construct($attributes); // TODO: Change the autogenerated stub
        $this->rules = $rules;
        $this->messages = $messages;
    }


    /**
     * Validates current attributes against rules
     *
     * @return boolean
     */
    public function validate()
    {
        $rules = $this->rules;
        $messages = $this->messages;

        if (!empty($rules))
        {
            $replace = ($this->getKey() > 0) ? $this->getKey() : null;
            foreach ($rules as $key => $rule)
            {
                $rules[$key] = str_replace(':id', $replace, $rule);
            }

            $errors = new MessageBag();

            //Validate the model
            $validation = Validator::make($this->attributes, $rules, $messages);
            if ($validation->fails())
            {
                $errors = $validation->messages();
            }
            $this->errors = $errors;
            if(!$errors->isEmpty()){
                return false;
            }
        }
        return true;
    }

}